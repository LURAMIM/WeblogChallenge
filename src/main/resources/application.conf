etl-config {
  extractor-list = ["WEBLOG_SOURCE"]
  transformer-list = ["PREPARE_SESSION", "SESSION_ID", "AGGREGATE_BY_IP_1", "AVERAGE_SESSION_TIME_2", "UNIQUE_URL_COUNT_3", "MOST_ENGAGED_USER_4"]
  loader-list = ["AGGREGATION_LOADER", "AVERAGE_SESSION_TIME_LOADER", "UNIQUE_URL_LOADER", "BUSY_AGGR_LOADER"]
}

extractors {
  WEBLOG_SOURCE {
    extractor-type = "CSV"
    data-frame-name = "WEBLOG"
    file-path = "/tmp/h3k_2015_07_22_mktplace_shop_web_log_sample.log"
    properties {
      "header" = "false"
      "delimiter" = " "
      "inferSchema" = "true"
    }
    column-names = ["logTimestamp", "api", "visitorIP_Port", "serverIP_Port", "forwardTime", "processingTime", "responseTime", "requestStatus", "responseStatus", "requestSize", "responseSize", "hitURL", "platform", "SSLCipher", "SSLProtocol"]
  }
}

transformers {
  PREPARE_SESSION {
    transformer-type = "SESSION_TRANSFORMER"
    source-data-frame = "WEBLOG"
    target-data-frame-name = "WEBLOG_INIT"
  }


  SESSION_ID {
    transformer-type = "QUERY_EXECUTOR"
    target-data-frame-name = "SESSION_ID"
    query = """
          select *,
            SUM(newSession) OVER (PARTITION BY visitorIP ORDER BY logTimestamp) AS sessionId
          FROM (
              select *,
                  CASE WHEN previousLogTimestamp IS NULL OR (unix_timestamp(logTimestamp) - unix_timestamp(previousLogTimestamp) >= (60*15)) THEN 1 ELSE 0 END AS newSession
              FROM (
                  select *,
                    lag(logTimestamp) OVER (PARTITION BY visitorIP ORDER BY logTimestamp) AS previousLogTimestamp
                  FROM WEBLOG_INIT
              )
          ) as InTbl
        """
  }

  AGGREGATE_BY_IP_1 {
    transformer-type = "QUERY_EXECUTOR"
    target-data-frame-name = "AGGREGATE_BY_IP_1"
    query = """
        select visitorIP, sessionId,
          sum(forwardTime) as total_forwardTime,
          avg(forwardTime) as average_forwardTime,
          sum(processingTime) as total_processingTime,
          avg(processingTime) as average_processingTime,
          sum(responseTime) as total_responseTime,
          avg(responseTime) as average_responseTime
        FROM SESSION_ID GROUP BY visitorIP, sessionId
      """
  }
  AVERAGE_SESSION_TIME_2 {
    transformer-type = "QUERY_EXECUTOR"
    target-data-frame-name = "AVERAGE_SESSION_TIME_2"
    query = """
        select SUM(totalSessionPerIP) AS totalSessions,
          SUM(sessionDurationPerIP) AS totalDuration,
          SUM(sessionDurationPerIP)/60 AS totalDurationInMinutes,
          (SUM(sessionDurationPerIP) / SUM(totalSessionPerIP)) / 60 AS averageSessionDuration
        FROM (
          SELECT visitorIP,
            MAX(sessionId) AS totalSessionPerIP,
            SUM(sessionDuration) AS sessionDurationPerIP
            FROM (SELECT visitorIP,
                sessionId,
                MAX(unix_timestamp(logTimestamp)) - MIN(unix_timestamp(logTimestamp)) AS sessionDuration
                FROM SESSION_ID
                GROUP BY visitorIP, sessionId
                ORDER BY visitorIP, sessionId)
            sessionAgr1InTbl1 GROUP BY visitorIP) as sessionAgr1InTbl2
      """
  }

  UNIQUE_URL_COUNT_3 {
    transformer-type = "QUERY_EXECUTOR"
    target-data-frame-name = "UNIQUE_URL_COUNT_3"
    query = """
        select visitorIP, sessionId, count(justURL) from (
           select
               visitorIP,
               sessionId,
               justURL,
               count(justURL) as urlCount
           from (select distinct visitorIP, sessionId, justURL from SESSION_ID) as uniqueInTbl1
           group by visitorIP,
               sessionId,
               justURL) as uniqueInTbl2
        where urlCount = 1 group by visitorIP, sessionId
    """
  }

  MOST_ENGAGED_USER_4 {
    transformer-type = "QUERY_EXECUTOR"
    target-data-frame-name = "MOST_ENGAGED_USER_4"
    query = """
      SELECT visitorIP,
        sessionId,
        MAX(unix_timestamp(logTimestamp)) - MIN(unix_timestamp(logTimestamp)) AS sessionDuration
      FROM SESSION_ID
      GROUP BY visitorIP, sessionId
      ORDER BY visitorIP, sessionId, sessionDuration desc
    """
  }

}

loaders {
  AGGREGATION_LOADER {
    loader-type = "SHOW"
    data-frame-name = "AGGREGATE_BY_IP_1"
    file-path = ""
  }

  AVERAGE_SESSION_TIME_LOADER {
    loader-type = "SHOW"
    data-frame-name = "AVERAGE_SESSION_TIME_2"
    file-path = ""
  }

  UNIQUE_URL_LOADER {
    loader-type = "SHOW"
    data-frame-name = "UNIQUE_URL_COUNT_3"
    file-path = ""
  }

  BUSY_AGGR_LOADER {
    loader-type = "SHOW"
    data-frame-name = "MOST_ENGAGED_USER_4"
    file-path = ""
  }
}